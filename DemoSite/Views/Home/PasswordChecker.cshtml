<div data-bind="stopBinding: true" id="demo">

    <div id="main-content">
        <div class="jumbotron">
            <div class="container">
                <h3>Password complexity checking</h3>
                <p class="lead">Demo of the zxcvbn.js (clientside) and zxcvb.net (serverside) libraries
                Try out some passwords;, if they are strong enough you will be able to 'sign up'.
                But that is only client side. Turning on the hacker switch will disable client side checking.
                Now you can submit, but will be blocked by the server side zxcvbn.net
                Yay client and server side password complexity checking!</p>

            </div>
        </div>
        <div class="row marketing">
            <div class="col-lg-6">

                <form class="form-signin" role="form">
                    <h2 class="form-signin-heading">Fake sign up form</h2>
                    <label for="name">Username</label>
                    <input name="name" data-bind="value: name, valueUpdate: 'keyup'" type="text" class="form-control" placeholder="Your name" required autofocus>
                    <br />
                    <label for="password">Password</label>
                    <input name="password" data-bind="value: password, valueUpdate: 'keyup'" type="password" class="form-control" placeholder="Password" required>                    
                    <meter data-bind="value: score" min="-1" max="4" low="2" high="3" optimum="4"></meter>


                        @*<br />
            <label for="genderRange">Gender</label>
            <br />
            <span>Male</span><span><input name="genderRange" type="range" min="0" max="100"/></span><span> Female</span>*@
                        <br />
                        <label for="hackerCheckBox">Hacker mode: </label>
                        <br />
                        <input type="checkbox" id="hackerCheckBox" name="hackerCheckBox" data-bind="value: isHacker">
                        <br />
                        <br />
                        <button class="btn btn-lg btn-primary" data-bind="enabled: isHacker" type="submit">Sign up</button>


</form>


            </div>

            <div class="col-lg-6">

                <form class="form-signin" role="form">
                    <h2 class="form-signin-heading">Hacker vision</h2>

                    <label for="nameInfo">Username</label>
                    <input name="nameInfo" data-bind="value: name" type="text" class="form-control" readonly>
                    <br />
                    <label for="passwordInfo">Password</label>
                    <input name="passwordInfo" data-bind="value: password" type="text" class="form-control" readonly>

                </form>




                <h4>Password analysis:</h4>
                <br />
                <p><b>Approximate Strength (0-4): </b><span data-bind="text: score"></span></p>
                <p><b>Time to crack:  </b><span data-bind="text: crack_time_display "></span></p>
                <p><b>Entropy:  </b><span data-bind="text: entropy"></span> bits</p>

                <br />
                <h4>What makes up the score: </h4>
                <ul data-bind="foreach: match_sequence" class="list-unstyled">
                    <li><b data-bind="text: token"></b> : <span data-bind="text: pattern"></span> (<span data-bind="text: entropy.toFixed(2)"></span> bits)</li>
                </ul>



            </div>
        </div>
    </div>
    <script type="text/javascript">

        $(document).ready(function () {
            console.log('here');
            $("#hackerCheckBox").bootstrapSwitch();
            var passwordCheckViewModel = function () {
                var self = this;
                self.name = ko.observable('');
                self.password = ko.observable('');
                self.rememberMe = ko.observable(true);
                self.isHacker = ko.observable(false);

                self.score = ko.computed(function () {
                    return zxcvbn(self.password(), '').score;
                }, self);
                self.entropy = ko.computed(function () {
                    return zxcvbn(self.password(), '').entropy;
                }, self);
                self.crack_time_display = ko.computed(function () {
                    return zxcvbn(self.password(), '').crack_time_display;
                }, self);
                self.match_sequence = ko.computed(function () {

                    var q = zxcvbn(self.password(), '').match_sequence;
                    return q;
                }, self);
                self.calc_time = ko.computed(function () {
                    return zxcvbn(self.password(), '').calc_time;
                }, self);

                self.meter = ko.computed(function () {
                    
                    return self.score;
                });




                self.canSubmit = ko.computed(function () {
                    return this.isHacker || self.score > 2;
                }, self);


            };


            ko.applyBindings(new passwordCheckViewModel(), document.getElementById("main-content"));

        });



    </script>

</div>
