<div data-bind="stopBinding: true" id="demo">
    <style>
        .hacker-vision {
            background-color: aliceblue;
        }

        .serverSaysYes {
            color: green;
            font-weight: 300;
        }

        .serverSaysNo {
            color: red;
            font-weight: 800;
        }
    </style>
    <div id="main-content">
        <div class="">
            <div class="container">
                <h3>Password complexity checking</h3>
                <p class="lead">
                    Demo of the <a href="https://tech.dropbox.com/2012/04/zxcvbn-realistic-password-strength-estimation/">zxcvbn.js</a> (clientside) and <a href="https://github.com/darcythomas/zxcvbn.net">zxcvb.net</a> (serverside) libraries.
                    try out some passwords.@*; if they are strong enough you will be able to 'sign up' .
    that is only client side. turning on the hacker switch will disable client side checking.
    now you can submit, but will be blocked by the server side zxcvbn.net.
    yay client and server side password complexity checking!*@
                </p>

            </div>
        </div>
        <div class="row marketing">
            <div class="col-lg-6">

                <div class="form-signin" role="form">
                    <h2 class="form-signin-heading">Fake sign in form</h2>
                    <label for="name">Username</label>
                    <input name="name" data-bind="value: name, valueUpdate: 'keyup'" type="text" class="form-control" placeholder="Your name" required autofocus>
                    <br />
                    <label for="password">Password</label>
                    <input name="password" data-bind="value: password, valueUpdate: 'keyup'" type="password" class="form-control" placeholder="Password" required>
                    <meter value="-1" data-bind="value: score" min="-1" max="4" low="2" high="3" optimum="4"></meter>


                    @*<br />
                        <label for="genderRange">Gender</label>
                        <br />
                        <span>Male</span><span><input name="genderRange" type="range" min="0" max="100"/></span><span> Female</span>*@
                    <br />
                    @*<label for="hackerCheckBox">Hacker mode: </label>
                        <br />
                        <input type="checkbox" id="hackerCheckBox" name="hackerCheckBox" data-bind="checked: isHacker">
                        <p data-bind="visible: isHacker">Client side validation turned off.</p>*@
                    <br />
                    <br />
                    <button class="btn btn-lg btn-primary" data-bind="click: submit">Sign up</button><span>&nbsp;&nbsp;&nbsp;</span><span class="serverSaysYes" data-bind="text: messageYup"></span><span class="serverSaysNo" data-bind="text: messageNope"></span>
                </div>


            </div>

            <div class="col-lg-6 hacker-vision">

                <form class="form-signin" role="form">
                    <h2 class="form-signin-heading">Hacker vision</h2>

                    <label for="nameInfo">Username</label>
                    <input name="nameInfo" data-bind="value: name" type="text" class="form-control" readonly>
                    <br />
                    <label for="passwordInfo">Password</label>
                    <input name="passwordInfo" data-bind="value: password" type="text" class="form-control" readonly>

                </form>
                <div>
                <h4>Password analysis:</h4>
                <br />
                <p><b>Approximate Strength (0-4): </b><span data-bind="text: score"></span></p>
                <p><b>Time to crack:  </b><span data-bind="text: crack_time_display "></span></p>
                <p><b>Entropy:  </b><span data-bind="text: entropy"></span> bits</p>
                @*<p><b>hacker:  </b><span data-bind="text: isHacker"></span> </p>*@
                <br />
                <h4>What makes up the score: </h4>
                <ul data-bind="foreach: match_sequence" class="list-unstyled">
                    <li><b data-bind="text: token"></b> : <span data-bind="text: pattern"></span> (<span data-bind="text: entropy.toFixed(2)"></span> bits)</li>
                </ul>

            </div>
        </div>
    </div>
    <script type="text/javascript">

        $(document).ready(function () {
            console.log('here');

            ko.validation.rules['remote'] = {
                async: true,
                validator: function (val, parms, callback) {
                    var defaults = {
                        url: '/demo/SignIn',
                        type: 'POST',
                        success: callback
                    };

                    var options = $.extend(defaults, parms);

                    $.ajax(options);
                },
                message: 'Server says no.'
            };

            ko.validation.registerExtenders();


            $("#hackerCheckBox").bootstrapSwitch();
            var passwordCheckViewModel = function () {
                var self = this;
                self.name = ko.observable('');
                self.password = ko.observable('');
                self.rememberMe = ko.observable(true);
                self.isHacker = ko.observable(false);
                self.messageYup = ko.observable('');
                self.messageNope = ko.observable('');
                self.serveriscool = ko.observable(false);

                self.score = ko.computed(function () {
                    return zxcvbn(self.password(), '').score;
                }, self);
                self.entropy = ko.computed(function () {
                    return zxcvbn(self.password(), '').entropy;
                }, self);
                self.crack_time_display = ko.computed(function () {
                    return zxcvbn(self.password(), '').crack_time_display;
                }, self);
                self.match_sequence = ko.computed(function () {

                    var q = zxcvbn(self.password(), '').match_sequence;
                    return q;
                }, self);
                self.calc_time = ko.computed(function () {
                    return zxcvbn(self.password(), '').calc_time;
                }, self);

                self.meter = ko.computed(function () {

                    return self.score;
                });


                ko.validation.rules['IsPasswordStrongEnough'] = {
                    validator: function (val, minScore) {
                        return self.isHacker() || zxcvbn(val, '').score >= minScore;
                    },
                    message: 'Please choose a stronger (longer) password'
                };
                ko.validation.registerExtenders();

                //the value '5' is the second arg ('otherVal') that is passed to the validator
                self.password.extend({ IsPasswordStrongEnough: 3 });

                //self.canSubmit = ko.computed(function () {
                //    return self.isValid();
                //}, self);

                self.submit = function () {
                    console.log('submitting');
                    $.post('/demo/signin', { UserName: self.name, Password: self.password })
                        .success(function (e) { console.log('yay it worked', e); })
                        .done(function (e) { console.log('done', e); self.messageYup('Server is cool with that'); self.serveriscool(false); self.messageNope(''); })
                        .fail(function (e) { console.log('fail', e); self.messageNope('Server says no'); self.serveriscool(false); self.messageYup(''); });

                };
            };
            ko.applyBindings(new passwordCheckViewModel(), document.getElementById("main-content"));
        });



    </script>

</div>
